# semih
JavaScript Algorithms and Data Structures

1)Shopping list 
onst myList = [["sneak", 13], ["krsl", 3], ["corc", 4], ["coa", 5],
["sem", 44]];

2)Write Reusable JavaScript with Functions

console.log("Hello World");

3) Write Reusable JavaScript with Functions
function reusableFunction() {
console.log("Hi World");
}
reusableFunction();

4) Passing Values to Functions with Arguments
Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or "passed") into a function when it is called are known as arguments.

Here is a function with two parameters, param1 and param2:

function testFun(param1, param2) {
  console.log(param1, param2);
}

function functionWithArgs(a,b) {
  console.log(a+b);
}
functionWithArgs (10,5)   15

5) Return a Value from a Function with Return

function plusThree(num) {
  return num + 3;
}

const answer = plusThree(5);
answer has the value 8.

function timesFive(num) {
  return num * 5;
}

6) Global Scope and Functions
let myGlobal = 10; 



function fun1() {
  oopsGlobal = 5; 

}
function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
  
  
  7) Local Scope and Functions
  
  Here is a function myTest with a local variable called loc.

function myTest() {
  const loc = "foo";
  console.log(loc);
}

myTest();
console.log(loc);
  }
  
  function myLocalScope() {
var myVar= 5;
console.log(myVar);
} 
myLocalScape(); 

8) Global vs. Local Scope in Functions
const someVar = "Hat";

function myFun() {
  const someVar = "Head";
  return someVar;
}

const outerWear = "T-Shirt";

function myOutfit() {
  var outerWear= "sweater";
  return outerWear;
}

myOutfit();







